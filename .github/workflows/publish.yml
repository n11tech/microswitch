name: Publish to GitHub Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      skipTests:
        description: 'Skip tests during publish'
        required: false
        default: 'true'
      forcePublish:
        description: 'Force publish by removing existing version if found'
        required: false
        default: 'true'

permissions:
  contents: read
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      GPR_OWNER: ${{ github.repository_owner }}
      # Extract repo name from owner/repo
      GPR_REPO: ${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          server-id: 'github'                   # matches distributionManagement <id>
          server-username: GITHUB_ACTOR         # env var provided by Actions
          server-password: GITHUB_TOKEN         # env var provided by Actions

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check for existing package version
        id: check_version
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "Checking for existing package version: $VERSION"
          
          # The package name in GitHub API is the Maven artifactId
          PACKAGE_NAME="io.development.n11tech.microswitch"
          
          # Try organization scope first (most common for GitHub Actions)
          echo "Checking organization packages..."
          ORG_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/${PACKAGE_NAME}/versions")
          
          ORG_CODE=$(echo "$ORG_RESPONSE" | tail -n 1)
          ORG_BODY=$(echo "$ORG_RESPONSE" | sed '$d')
          
          # Check if we got a valid response from org endpoint
          if [ "$ORG_CODE" = "200" ]; then
            echo "Found package in organization scope"
            VERSION_ID=$(echo "$ORG_BODY" | jq -r --arg version "$VERSION" '.[] | select(.name == $version) | .id // empty' 2>/dev/null || echo "")
            SCOPE="org"
          else
            # Try user scope if org fails
            echo "Checking user packages..."
            USER_RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/users/${{ github.repository_owner }}/packages/maven/${PACKAGE_NAME}/versions")
            
            USER_CODE=$(echo "$USER_RESPONSE" | tail -n 1)
            USER_BODY=$(echo "$USER_RESPONSE" | sed '$d')
            
            if [ "$USER_CODE" = "200" ]; then
              echo "Found package in user scope"
              VERSION_ID=$(echo "$USER_BODY" | jq -r --arg version "$VERSION" '.[] | select(.name == $version) | .id // empty' 2>/dev/null || echo "")
              SCOPE="user"
            else
              echo "Package not found in either org or user scope"
              VERSION_ID=""
              SCOPE=""
            fi
          fi
          
          # Set outputs based on what we found
          if [ -n "$VERSION_ID" ]; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "EXISTING_VERSION_ID=$VERSION_ID" >> $GITHUB_OUTPUT
            echo "SCOPE=$SCOPE" >> $GITHUB_OUTPUT
            echo "Found existing version $VERSION with ID: $VERSION_ID in $SCOPE scope"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION does not exist, proceeding with publish"
          fi

      - name: Delete existing package version
        if: steps.check_version.outputs.EXISTS == 'true' && github.event.inputs.forcePublish == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          VERSION_ID="${{ steps.check_version.outputs.EXISTING_VERSION_ID }}"
          SCOPE="${{ steps.check_version.outputs.SCOPE }}"
          PACKAGE_NAME="io.development.n11tech.microswitch"
          
          if [ -n "$VERSION_ID" ]; then
            echo "Deleting existing package version $VERSION (ID: $VERSION_ID) from $SCOPE scope"
            
            # Build the correct API URL based on scope
            if [ "$SCOPE" = "org" ]; then
              API_URL="https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/${PACKAGE_NAME}/versions/$VERSION_ID"
            else
              API_URL="https://api.github.com/users/${{ github.repository_owner }}/packages/maven/${PACKAGE_NAME}/versions/$VERSION_ID"
            fi
            
            # Delete the version
            DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$API_URL")
            
            DELETE_CODE=$(echo "$DELETE_RESPONSE" | tail -n 1)
            
            if [ "$DELETE_CODE" = "204" ] || [ "$DELETE_CODE" = "200" ]; then
              echo "Successfully deleted existing version $VERSION"
              # Wait a moment for the deletion to propagate
              sleep 5
            else
              echo "Warning: Could not delete version $VERSION (HTTP $DELETE_CODE)"
              BODY=$(echo "$DELETE_RESPONSE" | sed '$d')
              echo "Response: $BODY"
              echo "Will attempt to overwrite during publish (may fail with 409 Conflict)"
            fi
          else
            echo "Warning: Version exists but no ID found for deletion"
            echo "Manual deletion may be required via GitHub UI"
            echo "Attempting to continue with publish (may fail with 409 Conflict)"
          fi

      - name: Fail if version exists and force publish is disabled
        if: steps.check_version.outputs.EXISTS == 'true' && github.event.inputs.forcePublish != 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "ERROR: Package version $VERSION already exists!"
          echo "To overwrite, set 'forcePublish' input to 'true' when running this workflow manually."
          exit 1

      - name: Build and publish
        run: |
          mvn -B $([[ "${{ github.event.inputs.skipTests }}" != 'false' ]] && echo '-DskipTests') \
            -Dgpr.owner=${GPR_OWNER} \
            -Dgpr.repo=${GPR_REPO} \
            clean deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish summary
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "âœ… Successfully published microswitch version $VERSION to GitHub Packages"
          echo "ðŸ“¦ Package URL: https://github.com/${{ github.repository_owner }}/microswitch/packages/"
