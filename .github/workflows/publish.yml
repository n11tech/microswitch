name: Publish to GitHub Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      skipTests:
        description: 'Skip tests during publish'
        required: false
        default: 'true'
      forcePublish:
        description: 'Force publish by removing existing version if found'
        required: false
        default: 'true'

permissions:
  contents: read
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      GPR_OWNER: ${{ github.repository_owner }}
      # Extract repo name from owner/repo
      GPR_REPO: ${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          server-id: 'github'                   # matches distributionManagement <id>
          server-username: GITHUB_ACTOR         # env var provided by Actions
          server-password: GITHUB_TOKEN         # env var provided by Actions

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check for existing package version
        id: check_version
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "Checking for existing package version: $VERSION"
          
          # List package versions using GitHub API
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/microswitch/versions")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          # Handle different response codes
          if [ "$HTTP_CODE" = "404" ]; then
            echo "Package 'microswitch' not found (may not have been published yet)"
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION does not exist, proceeding with publish"
          elif [ "$HTTP_CODE" = "200" ]; then
            # Check if the response is a valid JSON array
            if echo "$BODY" | jq -e . >/dev/null 2>&1; then
              # Check if version exists in the response
              VERSION_EXISTS=$(echo "$BODY" | jq -r --arg version "$VERSION" '.[] | select(.name == $version) | .id // empty')
              
              if [ -n "$VERSION_EXISTS" ]; then
                echo "EXISTING_VERSION_ID=$VERSION_EXISTS" >> $GITHUB_OUTPUT
                echo "EXISTS=true" >> $GITHUB_OUTPUT
                echo "Found existing version $VERSION with ID: $VERSION_EXISTS"
              else
                echo "EXISTS=false" >> $GITHUB_OUTPUT
                echo "Version $VERSION does not exist, proceeding with publish"
              fi
            else
              echo "Invalid JSON response from API"
              echo "EXISTS=false" >> $GITHUB_OUTPUT
              echo "Assuming version does not exist, proceeding with publish"
            fi
          else
            echo "Unexpected HTTP status code: $HTTP_CODE"
            echo "Response body: $BODY"
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Assuming version does not exist, proceeding with publish"
          fi

      - name: Delete existing package version
        if: steps.check_version.outputs.EXISTS == 'true' && github.event.inputs.forcePublish == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          VERSION_ID="${{ steps.check_version.outputs.EXISTING_VERSION_ID }}"
          
          echo "Deleting existing package version $VERSION (ID: $VERSION_ID)"
          
          curl -L -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/microswitch/versions/$VERSION_ID"
          
          echo "Successfully deleted existing version $VERSION"

      - name: Fail if version exists and force publish is disabled
        if: steps.check_version.outputs.EXISTS == 'true' && github.event.inputs.forcePublish != 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "ERROR: Package version $VERSION already exists!"
          echo "To overwrite, set 'forcePublish' input to 'true' when running this workflow manually."
          exit 1

      - name: Build and publish
        run: |
          mvn -B $([[ "${{ github.event.inputs.skipTests }}" != 'false' ]] && echo '-DskipTests') \
            -Dgpr.owner=${GPR_OWNER} \
            -Dgpr.repo=${GPR_REPO} \
            clean deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish summary
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "âœ… Successfully published microswitch version $VERSION to GitHub Packages"
          echo "ðŸ“¦ Package URL: https://github.com/${{ github.repository_owner }}/microswitch/packages/"
